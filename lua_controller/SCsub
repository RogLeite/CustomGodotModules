#!/usr/bin/env python
# SCsub
#### Static compilation with Godot
"""

Import('env')

# Only needs cloning if different compilation FLAGS will be used
#module_env = env.Clone()

#Module's source files
src_list = ["register_types.cpp", "lua_controller.cpp"]
env.add_source_files(env.modules_sources, src_list)

## The libraries required to compile the module with LuaCpp
# Lua's library name does not need the version number. That is because of how it was manually installed
# No need to append LIBPATH=['/usr/local/lib'] (where the libraries were installed) because SCons already 
# checks the folder by default.
# LIBPATH will need appending if the libraries are installed elsewhere.
env.Append(LIBS=['luacpp','lua','stdc++'])

## Include directories for Lua and LuaCpp
env.Append(CPPPATH=['/usr/local/include', '/usr/local/include/LuaCpp'])
"""
#####################################################################################
#### Compilation as PIC, to link during Godot's execution
Import('env')

sources = [
    "register_types.cpp",
    "lua_controller.cpp",
    "LuaControllerContext.cpp",
    "lua_callable.cpp"
]

# First, create a custom env for the shared library.
module_env = env.Clone()

# Position-independent code is required for a shared library.
module_env.Append(CCFLAGS=['-fPIC'])

# Don't inject Godot's dependencies into our shared library.
module_env['LIBS'] = ['luacpp','lua','stdc++']
## Include directories for Lua and LuaCpp
module_env.Append(CPPPATH=['/usr/local/include', '/usr/local/include/LuaCpp'])

# Define the shared library. By default, it would be built in the module's
# folder, however it's better to output it into `bin` next to the
# Godot binary.
shared_lib = module_env.SharedLibrary(target='#bin/lua_controller', source=sources)

# Finally, notify the main build environment it now has our shared library
# as a new dependency.

# LIBPATH and LIBS need to be set on the real "env" (not the clone)
# to link the specified libraries to the Godot executable.

env.Append(LIBPATH=['#bin'])

# SCons wants the name of the library with it custom suffixes
# (e.g. ".x11.tools.64") but without the final ".so".
shared_lib_shim = shared_lib[0].name.rsplit('.', 1)[0]
env.Append(LIBS=[shared_lib_shim])

##To execute after this type of compilation, the path to dynamic libraries
##needs to be set to where the binary of this module was sent. Like this:
#export LD_LIBRARY_PATH="$PWD/bin/" 
##Then execute godot
#./bin/godot*

